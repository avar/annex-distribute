#!/usr/bin/env perl
use v5.14;
use strict;
use warnings FATAL => "all";
use autodie qw(:all);
use Sys::Hostname qw(hostname);
use Cwd qw(getcwd);
use Data::Dumper;
sub _dumper { Data::Dumper->new([$_[0]])->Useqq(1)->Terse(1)->Indent(0)->Dump() }
use constant DEBUG => 1;

use constant {
    # This only gets synced to/from manually
    MODE_MANUAL => "manual",
    # This tries to get all content from everywhere
    MODE_BACKUP => "backup",
};

my %repositories = (
    'evledraar' => {
        bare    => 0,
        annexes => [ qw( piracy avar-images private ) ],
        path    => '/home/avar/annex',
        host    => 'evledraar',
        get     => MODE_MANUAL,
    },
    '1.5tb-gfb' => {
        bare    => 0,
        annexes => [ qw( piracy avar-images private ) ],
        path    => '/media/avar/1.5TB-gfb/annex',
        host    => 'evledraar',
        get     => {
            piracy        => sub { _system("git annex get podcast") },
            'avar-images' => MODE_BACKUP,
            private       => MODE_BACKUP,
        },
    },
    '1.5tb-pb' => {
        bare    => 0,
        annexes => [ qw( piracy avar-images private ) ],
        path    => '/media/avar/1.5TB-pb/annex',
        host    => 'evledraar',
        get     => {
            piracy        => sub { _system("git annex get podcast") },
            'avar-images' => MODE_BACKUP,
            private       => MODE_BACKUP,
        },
    },
    '2tb-backup' => {
        bare    => 0,
        annexes => [ qw( piracy avar-images private ) ],
        path    => '/media/avar/2TB/annex',
        host    => 'evledraar',
        get     => {
            piracy        => sub { _system("git annex get podcast script books video/movies/Icelandic") },
            'avar-images' => sub { _system("git annex get DCIM* WhatsApp-Media") },
            private       => MODE_MANUAL,
        },
    },
    '3tb-backup' => {
        bare    => 0,
        annexes => [ qw( piracy avar-images private ) ],
        path    => '/media/avar/3TB/annex',
        host    => 'evledraar',
        get     => {
            piracy        => sub { _system("git annex get music podcast script books video/movies/Icelandic") },
            'avar-images' => MODE_BACKUP,
            private       => MODE_BACKUP,
        },
    },
    '4tb-backup' => {
        bare    => 0,
        annexes => [ qw( piracy avar-images private ) ],
        path    => '/media/avar/4TB/annex',
        host    => 'evledraar',
        get     => {
            piracy        => sub { _system("git annex get music podcast script books video/movies/Icelandic") },
            'avar-images' => MODE_BACKUP,
            private       => MODE_BACKUP,
        },
    },
    '4tbwd-backup' => {
        bare    => 0,
        annexes => [ qw( piracy avar-images private ) ],
        path    => '/media/avar/4TBWD/annex',
        host    => 'evledraar',
        get     => {
            piracy        => sub { _system("git annex get music podcast script books video/movies/Icelandic") },
            'avar-images' => MODE_BACKUP,
            private       => MODE_BACKUP,
        },
    },
    'unixis' => {
        bare    => 0,
        annexes => [ qw( piracy ) ],
        path    => '/dns/annex',
        host    => 'leech@vm.nix.is',
        get     => MODE_MANUAL,
    },
);

my @todo_get;
my @todo_cleanup;
my @todo_cleanup_unused;

# Ensure that all the repositories have everything else added as a
# remote annex so "sync" anywhere will sync the whole network.
REPOSITORY: for my $repository (keys %repositories) {
    my ($host, $path, $annexes, $bare, $raw_mode, $raw_get) = @{$repositories{$repository}}{qw(host path annexes bare mode get)};

    # Don't know what to do about remote hosts yet
    next REPOSITORY unless $host eq hostname();

    print "Got host <$host> path <$path> annexes <@$annexes> bare:<$bare>\n" if DEBUG;
    unless (-d $path) {
        print "The path path <$path> doesn't exist, presumably not mounted, skipping\n" if DEBUG;
        next REPOSITORY;
    }

    for my $annex (@$annexes) {
        my $get = ref $raw_get eq 'HASH'
          ? ($raw_get->{$annex} || die "PANIC: Couldn't find <$annex> in \$raw_get <" . _dumper($raw_get) . ">")
          : $raw_get;
        my $get_str = get_str($get);
        my $annex_path = "$path/$annex";
        print "  Processing annex <$annex> in mode <$get_str>, chdir-ing to <$annex_path>\n" if DEBUG;

        unless (-d $annex_path) {
            print "  We don't have <$annex_path> yet, creating it\n" if DEBUG;
            _system("git init $annex_path");
            chdir $annex_path;
            _system("git annex init $repository");
        } else {
            chdir $annex_path;
        }

        push @todo_get => {
            path     => $annex_path,
            callback => sub {
                chdir $annex_path;
                _system("git annex sync");
                if ($get eq MODE_BACKUP) {
                    _system("git annex get .");
                } elsif (ref $get eq 'CODE') {
                    $get->();
                }
            },
        };

        push @todo_cleanup => {
            path => $annex_path,
            callback => sub {
                chdir $annex_path;
                _system("git -c gc.pruneExpire=1.day.ago gc");
            },
        };

        push @todo_cleanup_unused => {
            path => $annex_path,
            callback => sub {
                chdir $annex_path;
                _system("git annex unused");
                _system("git annex dropunused all");
            },
        };

        R_REPOSITORY: for my $r_repository (grep { $_ ne $repository } keys %repositories) {
            my ($r_host, $r_path, $r_annexes, $r_bare, $r_get) = @{$repositories{$r_repository}}{qw(host path annexes bare get)};
            my $r_get_str = get_str($r_get);

            my $r_url = $r_host eq hostname() ? $r_path : "ssh://$r_host$r_path";
            $r_url .= "/$annex";
            $r_url .= "-annex.git" if $r_bare;

            my %r_annexes;
            @r_annexes{@$r_annexes} = ();

            my $r_should_add = exists $r_annexes{$annex};
            printf "    Will %s adding remote <$r_host> url <$r_url> path <$r_path> annexes <@$r_annexes> bare:<$r_bare>, get:<$r_get>\n",
                  $r_should_add ? 'be' : 'NOT BE' if DEBUG;
            next R_REPOSITORY unless $r_should_add;


            # If this was cloned from anywhere just forget where that was
            _system(qq[git remote rm origin 2>/dev/null], 1, 1);
            # Forget about dead remotes
            _system(qq[git remote rm $_ 2>/dev/null], 1, 1) for qw(freeagent-goflex-drive wnixis provider piracy-backup goflex-backup);
            # Maybe the remote exists already
            _system(qq[git remote add '$r_repository' '$r_url' 2>/dev/null], 1, 1);
            # But set it to whatever the canonical values are now
            _system(qq[git config 'remote.$r_repository.url' '$r_url'], 1, 1);
            # Make sure we don't do gc on push
            _system(qq[git config gc.auto 0], 0, 1);
        }
    }
}

if ("@ARGV" =~ /\bcleanup\b/) {
    # Now sync to the repositories we're backing up for
    for my $todo_get (reverse @todo_cleanup) {
        my ($path, $callback) = @$todo_get{qw(path callback)};

        print "Doing a cleanup of <$path>\n" if DEBUG;
        $callback->();
    }
}

if ("@ARGV" =~ /\brmunused\b/) {
    # Now sync to the repositories we're backing up for
    for my $todo_get (reverse @todo_cleanup_unused) {
        my ($path, $callback) = @$todo_get{qw(path callback)};

        print "Doing a cleanup of unused data for <$path>\n" if DEBUG;
        $callback->();
    }
}

if ("@ARGV" !~ /\bno-backup\b/) {
    # Now sync to the repositories we're backing up for
    for my $todo_get (reverse @todo_get) {
        my ($path, $callback) = @$todo_get{qw(path callback)};

        print "Executing a callback in <$path>\n" if DEBUG;
        $callback->();
    }
}

sub _system {
    my ($command, $bad_ok, $quiet) = @_;

    no autodie;

    my $cwd = getcwd();
    my $ret;
    if ($ret = system $command) {
        $ret = ($ret >> 8);
        if ($bad_ok) {
            print STDERR "    In <$cwd> the command <$command> failed with <$ret> but we're ignoring it\n" unless $quiet;
        } else {
            print STDERR "    In <$cwd> the command <$command> failed with <$ret>\n" unless $quiet;
            exit 1;
        }
    } else {
        print STDERR "    Ran command <$command>\n" unless $quiet;
    }

    return $ret;
}

sub get_str {
    my ($get) = @_;

    my $get_str = ref $get eq 'CODE'
        ? "callback"
        : $get;

    return $get_str;
}
